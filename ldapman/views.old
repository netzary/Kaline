from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.shortcuts import get_object_or_404
from django.contrib.auth.models import User
import datetime, random, re, os, csv
from django.template import Context, Template, loader
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from models import *
from django.forms import ModelForm
from models import *
from ldap_settings import *
from local_ldap import *
from django import forms
from django.contrib.auth.decorators import login_required
from django.utils.translation import ugettext_lazy as _
attrs_dict={}
@login_required
def base(request):
    return render_to_response("base.html", context_instance=RequestContext(request))




class UserForm(forms.Form):
    username = forms.CharField(max_length=30, required=True)
    first_name = forms.CharField(max_length=30, required=True)
    last_name= forms.CharField(max_length=30, required=True)
    email = forms.EmailField( required=True)
    phone = forms.IntegerField( required=False)
    password1 = forms.CharField(widget=forms.PasswordInput(attrs=attrs_dict, render_value=False),
                                label=_(u'New Password'))
    password2 = forms.CharField(widget=forms.PasswordInput(attrs=attrs_dict, render_value=False),
                                label=_(u'New password (again)'))
				
    def clean(self):
        """
        Verifiy that the values entered into the two password fields
        match. Note that an error here will end up in
        ``non_field_errors()`` because it doesn't apply to a single
        field.
       
        """
        if 'password1' in self.cleaned_data and 'password2' in self.cleaned_data:
            if self.cleaned_data['password1'] != self.cleaned_data['password2']:
                raise forms.ValidationError(_(u'You must type the same password each time'))
        return self.cleaned_data    

    def clean_username(self):
	if self.cleaned_data["username"]:
	    uname =self.cleaned_data["username"]
	    users = get_user_list()
	    if uname in users:
		raise forms.ValidationError("There's a user registered with this username. Choose another Name")
	return self.cleaned_data["username"]
	
	

	    
class GroupForm(forms.Form):
    name = forms.CharField(max_length=30, required=True)

    
    def clean_name(self):
	if self.cleaned_data["name"]:
	    uname =self.cleaned_data["name"]
	    users = get_group_list()
	    if uname in users:
		raise forms.ValidationError("There's a group registered with this name. Choose another Name")
	return self.cleaned_data["name"]
	


@login_required
def add_user(request):
    if request.method=="POST":
	form =UserForm(request.POST)
	if form.is_valid():
	    #return HttpResponse(request.POST.items())
	    user=LdapUser()
	    user.first_name =request.POST.get("first_name")
	    
	    user.last_name = request.POST.get("last_name")
	    user.full_name = request.POST.get("first_name") +"  " + request.POST.get("last_name")
	    uname =  request.POST.get("username")
	    user.username =uname
	    user.email =request.POST.get("email")
	    user.group = base_group
	    user.gecos = user.full_name
	    if request.POST.get("phone"):
		user.phone = request.POST.get("phone")
	    
	    #return HttpResponse(user.username +" " " " + user.gecos +"  " + str(base_group) + " " + user.gecos)
	    uids =[u.uid for u in LdapUser.objects.all()] 
	    #return HttpResponse(str(uids))
	    if  len(uids)!=0:
		uid_max = max(uids)
	    else:
		uid_max =uid_start 
	    user.uid = uid_max +1
	    #return HttpResponse(str(user.uid))
	    user.home_directory = os.path.join(home_start_path, user.username)
	    #return HttpResponse(user.username +" " + str(uid_max) + " " + user.gecos +"  " + str(base_group) + " " + user.home_directory)
	    user.save()
	    password1 = form.cleaned_data["password1"]
	    dn =find_dn(user.username)
	    x= change_p(dn, password1)
	    return HttpResponseRedirect("/users/")
    else:
	form =UserForm()
    return render_to_response("add_user.html", {"form":form}, context_instance=RequestContext(request))
	    
@login_required    
def add_group(request):
    if request.method=="POST":
	form =GroupForm(request.POST)
	if form.is_valid():
	    f=LdapGroup()
	    f.name = request.POST.get("name")
	    uids =[u.gid for u in LdapGroup.objects.all()] 
	    #return HttpResponse(str(uids))
	    if  len(uids)!=0:
		uid_max = max(uids)
	    else:
		uid_max =gid_start 
	    f.gid = uid_max +1
	    f.save()
	    return HttpResponseRedirect("/groups/addusers/"+ f.name +"/")
    else:
	form =GroupForm()
    return render_to_response("add_group.html", {"form":form}, context_instance=RequestContext(request))
	    
@login_required    
def add_users_to_group_form(request, group):
    group = get_object_or_404(LdapGroup, name__exact=group)
    existing = group.usernames
    users = get_user_list()
    others =[u for u in users if u not in existing]
    return render_to_response("user2g_form.html", { "existing": existing, "users":users, "others": others, "group":group },  context_instance=RequestContext(request))

@login_required
def users2groups(request, group):
    group = get_object_or_404(LdapGroup, name__exact=group)
    if request.method== "POST":
	keys = request.POST.keys()
	users = get_user_list()
	group.usernames=[]
	for key in keys:
	    if (key in users):
		group.usernames.append(key)
	group.save()
	
	return HttpResponseRedirect("/groups/")
    else:
	return HttpResponse(" ")

@login_required
def groups(request):
    groups =LdapGroup.objects.all()
    return render_to_response("groups.html", {"object_list": groups}, context_instance=RequestContext(request))
@login_required
def users(request):
    users =get_user_list()
    groups =LdapUser.objects.all()
    ob=[]
    #users.sort()
    for user in users:
	dic={}
	dic["username"]= user
	ob.append(dic)
    return render_to_response("users.html", {"object_list": ob}, context_instance=RequestContext(request))
@login_required
def delete_user(request, user):
    try:
	u =  LdapUser.objects.get(username__exact = user)
	u.delete()
    except LdapUser.DoesNotExist:
	return HttpResponseRedirect("This user has not been created with the application Netzary LDAP Manager.Always create users with Netzary. It's not deleted")

    return HttpResponseRedirect("/users/")


@login_required
def delete_group(request, group):
    u =  get_object_or_404(LdapGroup, name__exact = group)
    if len(group.usernames) == 0:
	group.delete()
	return HttpResponseRedirect("/groups/")
    else:
	return HttpResponse("You can only delete Empty Groups")
    

class ChangePasswordForm(forms.Form):
    password1 = forms.CharField(widget=forms.PasswordInput(attrs=attrs_dict, render_value=False),
                                label=_(u'New Password'))
    password2 = forms.CharField(widget=forms.PasswordInput(attrs=attrs_dict, render_value=False),
                                label=_(u'New password (again)'))
				
    def clean(self):
        """
        Verifiy that the values entered into the two password fields
        match. Note that an error here will end up in
        ``non_field_errors()`` because it doesn't apply to a single
        field.
       
        """
        if 'password1' in self.cleaned_data and 'password2' in self.cleaned_data:
            if self.cleaned_data['password1'] != self.cleaned_data['password2']:
                raise forms.ValidationError(_(u'You must type the same password each time'))
        return self.cleaned_data    

@login_required
def change_password(request, user):
    if request.method=="POST":
	form = ChangePasswordForm(request.POST)
	if form.is_valid():
	    password1= form.cleaned_data["password1"]
	    dn =find_dn(user)
	    x= change_p(dn, password1)
	    if x ==1:
		return HttpResponseRedirect("/users/")
	    else:
		return HttpResponse("Some Error has Occured")
    else:
	form = ChangePasswordForm()
    return render_to_response("password.html", {"form":form}, context_instance=RequestContext(request))



###

class TForm(forms.Form):
    file = forms.FileField()



@login_required
def upload(request):
    if request.method=="POST":
	form =TForm(request.POST, request.FILES)
	if form.is_valid():
	    if handle_uploaded_file(request.FILES['file']) == True:
		return HttpResponseRedirect('/users/')
	    else:
		return HttpResponse("Make sure the CSV has 5 columns. All correctly filled using text. No special Chars,")
    else:
        form = TForm()
    return render_to_response('upload.html', {'form': form}, context_instance=RequestContext(request))
	    
	    
    
def handle_uploaded_file(f):
    reader = csv.reader(f)
    for row in reader:
	
	if len(row)<5:
	    return False
	else:
	    
	    user=LdapUser()
	    user.username = row[0]
	    if user.username in [u.username for u in LdapUser.objects.all()]:
		user.username =user.username +"_" + str(random.randint(0, 10000))
	    user.first_name =row[1]
	    
	    user.last_name = row[2]
	    user.full_name = row[1] +"  " + row[2]
	    user.email =row[3]
	    user.group = base_group
	    user.gecos = user.full_name
	    
	    #return HttpResponse(user.username +" " " " + user.gecos +"  " + str(base_group) + " " + user.gecos)
	    uids =[u.uid for u in LdapUser.objects.all()] 
	    #return HttpResponse(str(uids))
	    if  len(uids)!=0:
		uid_max = max(uids)
	    else:
		uid_max =uid_start 
	    user.uid = uid_max +1
	    #return HttpResponse(str(user.uid))
	    user.home_directory = os.path.join(home_start_path, user.username)
	    user.save()
	    password1= row[4]
	    dn =find_dn(user.username)
	    x= change_p(dn, password1)
	    
    return True
